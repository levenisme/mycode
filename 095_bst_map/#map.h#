#ifndef __MAP_H__
#define __MAP_H__
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <stdexcept>
template<typename K, typename V>
class Map
{
 public:
  virtual void add(const K & key, const V & value) = 0;
  virtual const V & lookup(const K & key) const throw(std::invalid_argument) = 0;
  virtual void remove(const K & key) = 0;
  virtual ~Map<K, V>() {}
};
//template<typename K, typename V>
class BstMap : public Map<int, int>
{
 private:
 public:
  virtual void add(const int & key,const int &value){
  }
  virtual const int & lookup(const int & key) const throw(std::invalid_argument) {}
  int & lookup(const int&key){}
  virtual void remove(const int & key){}
  bool numItems()const;
};
#endif
